'use client'

import React, { useState, useEffect } from 'react'
import axios from 'axios'
import TTSPlayer, { prepareFirstChunk, playFirstChunk, prepareRemainingChunks } from './TTSPlayer'

interface CompanyInfoProps {
  companyName: string
  onComplete: (info: string) => void
}

export default function CompanyInfo({ companyName, onComplete }: CompanyInfoProps) {
  const [companyInfo, setCompanyInfo] = useState('')
  const [isLoading, setIsLoading] = useState(true)
  const [isPlaying, setIsPlaying] = useState(false)
  const [error, setError] = useState('')
  const isFetchingRef = React.useRef(false)

  useEffect(() => {
    console.log('🔍 useEffect triggered - companyName:', companyName, 'isFetching:', isFetchingRef.current)
    if (!isFetchingRef.current) {
      console.log('🚀 fetchCompanyInfo 호출')
      isFetchingRef.current = true
      fetchCompanyInfo()
    } else {
      console.log('⚠️ 이미 fetch 중, 건너뜀')
    }
  }, [companyName])

  const fetchCompanyInfo = async () => {
    console.log('🚀 fetchCompanyInfo 호출 시작 - timestamp:', Date.now())
    try {
      setIsLoading(true)
      setError('')

      // Perplexity API 호출
      const response = await axios.post('/api/perplexity', {
        companyName,
        prompt: `### ${companyName} 회사에 대해서 검색하고 알려줘. 일본에 있는 회사야. 회사의 역사, 사업영역, 이미지(브랜드, 슬로건 등) 약 500자. 

중요: 
- 접두, 접미 미사여구 제거
- [1], [2], [3] 같은 각주나 참조 번호 제거
- 순수한 회사 정보만 존댓말로 출력
- 마크다운 형식이나 특수 기호 사용 금지`
      })

      const info = response.data.info
      console.log('=== Perplexity API 응답 ===')
      console.log('응답 데이터:', response.data)
      console.log('추출된 info:', info)
      console.log('=======================')
      
      setCompanyInfo(info)
      
      // 첫 번째 TTS 청크를 미리 생성하여 버퍼링
      console.log('첫 번째 TTS 청크 생성 시작...')
      const firstAudio = await prepareFirstChunk(info)
      if (firstAudio) {
        // 첫 번째 청크 즉시 재생
        playFirstChunk(
          firstAudio,
          () => setIsPlaying(true),  // 재생 시작 시
          () => setIsPlaying(false)  // 재생 완료 시
        )
        // 나머지 청크는 백그라운드에서 생성
        prepareRemainingChunks(info)
      }
      
    } catch (error) {
      console.error('Error fetching company info:', error)
      setError('회사 정보를 가져오는 중 오류가 발생했습니다.')
    } finally {
      // setIsLoading(false) // onFirstChunkReady에서 처리
    }
  }

  if (isLoading) {
    return (
      <div className="card p-6">
        <div className="flex items-center justify-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
          <span className="ml-3">회사 정보를 가져오는 중...</span>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="card p-6">
        <div className="text-red-600 mb-4">{error}</div>
      </div>
    )
  }

  return (
    <div className="card p-6">
      <h2 className="text-xl font-semibold mb-4">회사 정보</h2>
      
      <div className="mb-6">
        <div className="text-gray-700 leading-relaxed whitespace-pre-wrap">
          {companyInfo}
        </div>
      </div>
      
      <div className="flex justify-between items-center">
        <TTSPlayer 
          text={companyInfo}
          onPlayStart={() => setIsPlaying(true)}
          onPlayEnd={() => setIsPlaying(false)}
          className="flex-1 mr-4"
        />
        
        <button
          onClick={() => onComplete(companyInfo)}
          className="btn-secondary"
        >
          다음
        </button>
      </div>
    </div>
  )
}
